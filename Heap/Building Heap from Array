Read the documentation first :- https://www.geeksforgeeks.org/building-heap-from-array/

1. We do not need to heapify the complete tree(binary tree made from array) because there is no sense of heapifying the leaf nodes , so we will start our heapify process from the last non_leaf node and move towards the up direction , now the 
Last non_leaf node will be -> (n/2) -1

How ?
Last non-leaf node = parent of last-node.
or, Last non-leaf node = parent of node at (n-1)th index.
or, Last non-leaf node = Node at index ((n-1) - 1)/2.
                       = (n/2) - 1.
                       
Left child of i-th node is at (2*i + 1)th index.
Right child of i-th node is at (2*i + 2)th index.
Parent of i-th node is at (i-1)/2 index.


#include <iostream>
using namespace std;

void heapify(int *arr,int i,int n){
    int largest=i;
    int l=2*i+1;
    int r=2*i+2;
    if(l<n && arr[l]>arr[largest]){
        largest=l;
    }
    if(r<n && arr[r]>arr[largest]){
        largest=r;
    }
    if(largest!=i){
        swap(arr[i],arr[largest]);
        heapify(arr,largest,n);
    }
    
}

void buildHeap(int *arr,int n)
{
    int non_leaf=(n/2)-1;
    for(int i=non_leaf;i>=0;i--){
        heapify(arr,i,n);
    }
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    buildHeap(arr,n);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }

	
	return 0;
}
