/*Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.

Example 1:

Input:
S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest 
substring with K distinct characters.
*/



// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution{
    public:
    int longestKSubstr(string s, int k) {
    // your code here
     unordered_map<char,int> mp;
        int mx=-1;
        int i=0,j=0;
        int n=s.length();
        if(n==0){
            return 0;
        }
        while(j<n){
            mp[s[j]]++;
            if(mp.size()<k){
                j++;
            }
           else if(mp.size()==k){
               int temp=mp.size();
                mx=max(j-i+1,mx);
                j++;
            }else if(mp.size()>k){
                while(mp.size()>k){
                    mp[s[i]]--;
                    if(mp[s[i]]==0){
                        mp.erase(s[i]);
                    }
                    i++;
                }
                   if(mp.size()==k){
                       int temp=mp.size();
                mx=max(j-i+1,mx);
                       
                   }
               j++; 
            }
        }
        return mx;
       
    }
    
    
    
    
    
    
    
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        int k;
        cin >> k;
        Solution ob;
        cout << ob.longestKSubstr(s, k) << endl;
    }
}
  // } Driver Code Ends
