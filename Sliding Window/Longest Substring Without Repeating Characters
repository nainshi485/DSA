/*Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.*/


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
       unordered_map<char,int> mp;
        int mx=INT_MIN;
        int i=0,j=0;
        int n=s.length();
        if(n==0){
            return 0;
        }
        while(j<n){
            mp[s[j]]++;
            if(mp.size()==j-i+1){
               int temp=mp.size();
                mx=max(temp,mx);
                j++;
            }else if(mp.size()<j-i+1){
                while(mp.size()<j-i+1){
                    mp[s[i]]--;
                    if(mp[s[i]]==0){
                        mp.erase(s[i]);
                    }
                    i++;
                }
                   if(mp.size()==j-i+1){
                       int temp=mp.size();
                mx=max(temp,mx);}
               j++; 
            }
        }
        return mx;
        
    }
};
